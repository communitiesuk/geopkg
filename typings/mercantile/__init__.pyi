from collections.abc import Generator
from typing import Any, NamedTuple, Optional, Sequence

class Tile(NamedTuple("Tile", [("x", int), ("y", int), ("z", int)])): ...

class LngLat(NamedTuple):
    lng: float
    lat: float

class LngLatBbox(NamedTuple):
    west: float
    south: float
    east: float
    north: float

class Bbox(NamedTuple):
    left: float
    bottom: float
    right: float
    top: float

class MercantileError(Exception): ...
class InvalidLatitudeError(MercantileError): ...
class InvalidZoomError(MercantileError): ...
class ParentTileError(MercantileError): ...
class QuadKeyError(MercantileError): ...
class TileArgParsingError(MercantileError): ...
class TileError(MercantileError): ...

def ul(*tile: Tile) -> LngLat: ...
def bounds(*tile: Tile) -> LngLatBbox: ...
def lnglat(x: float, y: float, truncate: bool = ...) -> LngLat: ...
def neighbors(*tile: Tile, **kwargs: Any) -> list[Tile]: ...
def xy_bounds(*tile: Tile) -> Bbox: ...
def tile(lng: float, lat: float, zoom: int, truncate: bool = ...) -> Tile: ...
def quadkey(*tile: Tile) -> str: ...
def quadkey_to_tile(qk: str) -> Tile: ...
def tiles(
    west: float,
    south: float,
    east: float,
    north: float,
    zooms: Sequence[int],
    truncate: bool = ...,
) -> Generator[Tile, Any, None]: ...
def parent(*tile: Tile, **kwargs: Any) -> Tile: ...
def children(*tile: Tile, **kwargs: Any) -> list[Tile]: ...
def simplify(tiles: list[Tile]) -> list[Tile]: ...
def bounding_tile(*bbox: Bbox, **kwds: Any) -> Tile: ...
def feature(
    tile: Tile,
    fid: Optional[str] = ...,
    props: Optional[dict[str, Any]] = ...,
    projected: str = ...,
    buffer: Optional[float] = ...,
    precision: Optional[int] = ...,
) -> dict[str, Any]: ...
def minmax(zoom: int) -> tuple[int, int]: ...

# Names in __all__ with no definition:
#   Bbox
#   LngLat
#   LngLatBbox
